# This workflow will build, test, and publish a Python Package to PyPI with automatic version bumping
# For more information see: https://help.github.com/en/actions/language-and-framework-guides/using-python-with-github-actions#publishing-to-package-registries

name: Build and Publish Python Package

on:
  release:
    types: [published]
  workflow_dispatch:  # Allow manual triggering
    inputs:
      publish:
        description: 'Publish to PyPI'
        required: false
        default: false
        type: boolean
      create_release:
        description: 'Create GitHub release'
        required: false
        default: true
        type: boolean
      bump_type:
        description: 'Version bump type'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major

permissions:
  contents: read

jobs:
  get-version:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.bump_version.outputs.version }}
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    - name: Get version from project
      id: get_version
      run: |
        # Read version directly from VERSION file to avoid import dependencies
        VERSION=$(cat py4jrush/VERSION)
        echo "version=${VERSION}" >> $GITHUB_OUTPUT
        echo "Current version: ${VERSION}"
    - name: Check and bump version
      id: bump_version
      uses: jianlins/check_bump_version@v1
      with:
        bump-type: ${{ inputs.bump_type || 'patch' }}
        current-version: ${{ steps.get_version.outputs.version }}

  build-and-test:
    if: github.ref == 'refs/heads/master'
    needs: get-version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'  # Use a single recent Python version for building
    - name: Set up JDK
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '8'
    - name: Update VERSION file with bumped version
      run: |
        echo "${{ needs.get-version.outputs.version }}" > py4jrush/VERSION
        echo "Updated VERSION file to: ${{ needs.get-version.outputs.version }}"
        cat py4jrush/VERSION
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build
        pip install -r requirements.txt
    - name: Build package
      run: python -m build
    - name: Verify built package version
      run: |
        echo "Expected version: ${{ needs.get-version.outputs.version }}"
        echo "Built packages:"
        ls -la dist/
        # Extract version from wheel filename and verify it matches
        BUILT_VERSION=$(ls dist/*.whl | grep -o '[0-9]\+\.[0-9]\+\.[0-9]\+' | head -1)
        echo "Built version: $BUILT_VERSION"
        if [ "$BUILT_VERSION" != "${{ needs.get-version.outputs.version }}" ]; then
          echo "ERROR: Built version ($BUILT_VERSION) does not match expected version (${{ needs.get-version.outputs.version }})"
          exit 1
        fi
        echo "✅ Version verification passed"
    - name: Test wheel installation
      run: |
        pip install dist/*.whl
        python -c "import py4jrush; print('Successfully imported py4jrush version:', py4jrush.__version__)"
        # Verify installed version matches expected
        INSTALLED_VERSION=$(python -c "import py4jrush; print(py4jrush.__version__)")
        if [ "$INSTALLED_VERSION" != "${{ needs.get-version.outputs.version }}" ]; then
          echo "ERROR: Installed version ($INSTALLED_VERSION) does not match expected version (${{ needs.get-version.outputs.version }})"
          exit 1
        fi
        echo "✅ Installation version verification passed"
    - name: Run tests
      run: |
        python -m unittest discover tests
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist
        path: dist/

  create-release:
    if: github.ref == 'refs/heads/master' && github.event_name == 'workflow_dispatch' && inputs.create_release
    needs: [get-version, build-and-test]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
    - uses: actions/checkout@v4
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    - name: Create GitHub Release
      uses: softprops/action-gh-release@v2
      with:
        tag_name: ${{ needs.get-version.outputs.version }}
        name: Release ${{ needs.get-version.outputs.version }}
        body: |
          Release version ${{ needs.get-version.outputs.version }}
          
          Built from commit: ${{ github.sha }}
        files: dist/*
        draft: false
        prerelease: false
    - name: Update VERSION file after release
      if: needs.get-version.outputs.version != ''
      run: |
        echo "${{ needs.get-version.outputs.version }}" > py4jrush/VERSION
        cat py4jrush/VERSION
    - name: Commit and push version change
      if: success() && needs.get-version.outputs.version != ''
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "github-actions@github.com"
        git add py4jrush/VERSION
        git commit -m "Bump version to ${{ needs.get-version.outputs.version }} [skip ci]" || echo "No changes to commit"
        git push

  publish:
    if: github.ref == 'refs/heads/master' && (github.event_name == 'release' || (github.event_name == 'workflow_dispatch' && inputs.publish))
    needs: [build-and-test]
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # IMPORTANT: this permission is mandatory for trusted publishing
    steps:
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: dist
        path: dist/
    - name: Publish package to PyPI
      uses: pypa/gh-action-pypi-publish@release/v1

